# all sections correspond to different flag to result_plotter
# each option admits multiple vars if separated with comma
# e.g. BaseName = BaseName1, BaseName2... will results with list
# BaseName = [ BaseName1, BaseName2,... ]
#
# NOTE: WHATEVER THE KEY IS, IT WILL BE WITH LOWER CASE IN THE PROGRAM
#

#################################################################################
#################################################################################
#################################################################################

[MvsR_GR]
    # will plot Mass vs Radius with including GR plot
    # the function is cutting the entries with masses less than 0.5
    # the function is cutting for all, but GR case, the entries after the max mass

    # the full path for the results
    path = /home/dimitar/projects/STT_theories/results

    # the base name of each file
    base_name = STT_phiScal_J

    # which EOS will be plotted
    # TODO implement some sort of multi line, now breaks because of "\n"
    eos_name = SLy, APR2, APR3, APR4, FPS, WFF1, WFF2, WFF3, BBB2, ENG, MPA1, MS1, MS2, MS1b, GNH3, H3, H4, ALF2, ALF4

    # parameter values
    beta = -6
    m = 0, 5e-3, 5e-2
    lambda = 0, 1e-1, 1e0, 1e1

    # which columns to be used for x and y axis
    x_col = 3
    y_col = 2

    # set x and y labels
    x_label = R [km]
    y_label = $M/M_{\odot}$

    # script has dictionary units which contains unit coefficients
    # if we want to give units to any axis, stayed what should it be
    # available are: "density", "pressure", "R", "J"
    x_unit = R
    y_unit =

#################################################################################
#################################################################################
#################################################################################

[create_uniI_data]
    # it will convert the data needed for fitting the universal relations
    # it will cut out min_mass which is hard coded
    # also it will cut out values after maximum mass is reached

    # the full path for the results
    path = /home/dimitar/projects/STT_theories/results

    # the base name of each file
    base_name = STT_phiScal_J

    # which EOS will be plotted
    # TODO implement some sort of multi line, now breaks because of "\n"
    eos_name = SLy, APR2, APR3, APR4, FPS, WFF1, WFF2, WFF3, BBB2, ENG, MPA1, MS1, MS2, MS1b, GNH3, H3, H4, ALF2, ALF4

    # parameter values
    beta = -6
    m = 0, 5e-3, 5e-2
    lambda = 0, 1e-1, 1e0, 1e1

    # which column is the mass, radius and calculated moment of inertia
    col_r = 3
    col_m = 2
    col_j = 5

#################################################################################
#################################################################################
#################################################################################

[tildeI_GR]
    # it will use the tilde I files to create the tildeI, return coefficients
    # some residuals, fits and etc

    # the full path for the results
    path_main = /home/dimitar/projects/STT_theories/results
    path_fitting = Fitting

    # the base name of each file
    base_name = STT_phiScal_J

    # which EOS will be plotted
    # TODO implement some sort of multi line, now breaks because of "\n"
    eos_name = SLy, APR2, APR3, APR4, FPS, WFF1, WFF2, WFF3, BBB2, ENG, MPA1, MS1, MS2, MS1b, GNH3, H3, H4, ALF2, ALF4

    # parameter values
    beta = -6
    m = 0, 5e-3, 5e-2
    lambda = 0, 1e-1, 1e0, 1e1

    # which columns to be used for x and y axis
    x_col = 0
    y_col = 1

    # set x and y_up, y_down labels (plot have shared x axis and different y)
    # and are stick together
    x_label = M/R
    y_up_label = $I/(MR^2)$
    y_down_label = $\left| 1 - \tilde I/\tilde I_{fit} \right|$
